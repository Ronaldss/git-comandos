=== GIT === 
Resumo por RonaldsS

Estados de um arquivo no Git -->

1 - Untracked (não marcado)
2 - unmodified (não modificado)
3 - modified (arquivo modificado)
4 - staged (estágio) que é a área onde os arquivos que irão fechar uma versão 
                     estarão aguardando. E o staged só ficará disponível depois
                     que fizer o 'git add (nome do arquivo)'

:::::::::::: Comandos de configuração :::::::::::: 

Configurando nome de usuário:
git config --global user.name "nome"

Configurando e-mail:
git config --global user.email "ronald_ss@outlook,com"

Configurando editor preferido:
git config --global core.editor nomeAtalhoDoEditor
-----------------------------------------------------------------------------
 ::::::::::::::::::: Comandos básicos ::::::::::::::::::: 

mkdir --> criar pasta
cd --> acesso a diretórios
git init -->  inicializa repositório  e verifica modificações constantemente
ls-la --> mostra os diretórios referentes e suas permissões
ls --> idem
cd.. --> voltar um diretório
git log --> mostra o autor e a data do ultimo commit
git log --decorate --> Idem com mais 
git log --author="nome do autor"
git shortlog --> verificar quantos contribuintes existem. Quem e quantos commites fizeram.
git shortlog -sn --> Idem, simplifica a saida mostrando apenas a quantidade de commits e o nome do author.
git log --graph --> mostra em forma grafica as mudanças
git show (hash que tem dentro do 'got log') --> consegue vê ixatamente qual foi a modificação no arquivo.
git remote --> mostra os repositórios que estão ligados
git remote --> Idem, mostra o endereço
------------------------------------------------------------------------------

:::::::::::: Comandos mais usados :::::::::::: 

git status --> reportar a situação do repositório no momento
git add --> adicionar este arquivo dentro do git
git commit -m "alguma observação" --> para commitar
git commit -am --> para adicionar e comitar ao mesmo tempo, funciona apenas para arquivos que ja haviam sido adicionados antes.

git diff --> possível verificar alterações no arquivo antes do commit
git diff --name-only --> verifica quais arquivos foras alterados

git checkout (nome do arquivo)--> reseta o arquivo para antes da ultima edição
git reset HEAD (nome do arquivo) --> caso queira desistir da última alteração que ja teenha sido adicionada ao git. Feito o 'git add .'

git reset --soft --mixed --hard --> comando para retornar de um comite feito. funciona de 3 formas diferente
git reset --sotft (hash do log) --> retorna do comite, mas n pode editar os arquivos. (legal para mudar a msg do comite)
git reset --mixed (hash do log) --> retorna do comite e libera a edição do arquivo.
git reset --hard (hash do log)  --> volta para o commit anterior e APAGA TUDO referente. Cuidado com esse!
git rm -f {arquivo} --> Para remover um arquivo do Git e tbm de seu repositório, para vc n ficar vendo ele como untracked
git clone "SSH caminho" novo_nome --> para fazer uma cópia ou clone do projeto.

git branch nome-nova-branch --> para criar nova branch
git checkout nome-nova-branch --> alterar visão para nova branch

Obs: estes dois comando acima poderiam ser resulmidos por:
git checkout -b nome-nova-branch --> altomaticamente cria e ja muda o foco para a nova branch

***PARA ENVIAR A NEW BRANCH P/ O REPOSITÓRIO ORIGINAL DEPOIS DE TER CONCLUIDO AS ALTERAÇÃOES
git push --set-upstream origin (nome da branch)

*** IMPORTANTE, PARA MANDAR SINCRONIZADOI ENTRE TODOS OS CONTRIBUIDORES
Verifique antes: git remote -v  (inicialmente só existirá vc mesmo)

Adcionando o dono do repositório: 
git remote add upstream (link do repositório).git

agora verifique novamente: git remote -v
------------------------------------------------------------------------------

-------------------
nenhuma alteração
primeira alteração
segundda alteração
terceira alteração
quarta alteração
quinta alteração
sexta alteração
setima alteração
oitava alteração
nona alteração
décima alteração.
Outras alterações via GitHub
-------------------
